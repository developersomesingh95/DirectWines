default_platform(:ios)

# List of all secrets
DEVELOPER_APP_ID = ENV["DEVELOPER_APP_ID"]
DEVELOPER_APP_IDENTIFIER = ENV["DEVELOPER_APP_IDENTIFIER"]
PROVISIONING_PROFILE_SPECIFIER = ENV["PROVISIONING_PROFILE_SPECIFIER"]
TEMP_KEYCHAIN_USER = ENV["TEMP_KEYCHAIN_USER"]
TEMP_KEYCHAIN_PASSWORD = ENV["TEMP_KEYCHAIN_PASSWORD"]
APPLE_ISSUER_ID = ENV["APPLE_ISSUER_ID"]
APPLE_KEY_ID = ENV["APPLE_KEY_ID"]
APPLE_KEY_CONTENT = ENV["APPLE_KEY_CONTENT"]
GIT_AUTHORIZATION = ENV["GIT_AUTHORIZATION"]
MATCH_REPO_URL = ENV["MATCH_REPO_URL"]
ENV["MATCH_PASSWORD"] = "Somd@t329##"

# We will download and store our keychain into a file
def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

def create_temp_keychain(name, password)
  create_keychain(
    name: name,
    password: password,
    unlock: true,
    timeout: 0
  )
end

def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end

platform :ios do
  desc "Submit a new build to app store"
  lane :deploy_to_app_store do
    # Access to App Store Connect API
    api_key = app_store_connect_api_key(
      key_id: APPLE_KEY_ID,
      issuer_id: APPLE_ISSUER_ID,
      key_content: APPLE_KEY_CONTENT,
      duration: 1200,            
      in_house: false
    )

    # Get the certificates and profiles from the GitHub account using 'match'
    match(
      type: 'appstore',
      app_identifier: DEVELOPER_APP_IDENTIFIER,
      git_url: MATCH_REPO_URL,
      git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
      keychain_name: TEMP_KEYCHAIN_USER,
      keychain_password: TEMP_KEYCHAIN_PASSWORD,
      api_key: api_key,
      clone_branch_directly: true,
      git_branch: "main",  # Ensure the branch is correct
      generate_apple_certs: false,  # Use existing certs if they are pre-generated
    )

    # Install provisioning profile manually on GitHub Actions
    # Ensure that the provisioning profile is already decoded on GitHub Actions runner
    # This decodes the base64 profile and saves it in the correct location
    run('echo "$PROVISIONING_PROFILE_SPECIFIER" | base64 --decode > ~/Library/MobileDevice/Provisioning\\ Profiles/Laithwaites\\ Uk\\ Distribution.mobileprovision')

    # Build the app with 'gym', specifying manual provisioning profiles
    ipa = gym(
      configuration: "Release",
      workspace: 'DirectWines.xcworkspace',  # Your workspace
      scheme: "DirectWines",                  # Your scheme
      clean: true,                            # Forces a clean build
      skip_archive: false,                    # Don't skip archiving
      export_method: "app-store",             # Set export method for app store
      export_options: {
        provisioningProfiles: {
          DEVELOPER_APP_IDENTIFIER => "Laithwaites Uk Distribution"  # Use the provisioning profile name here
        },
        signingStyle: "manual",  # Ensure manual signing is used
      },
    )

    # Uncomment if you want to upload the build to TestFlight or App Store
    pilot(
      apple_id: DEVELOPER_APP_ID,
      app_identifier: DEVELOPER_APP_IDENTIFIER,
      distribute_external: false,
      notify_external_testers: true,
      uses_non_exempt_encryption: false,
      ipa: ipa,
      skip_waiting_for_build_processing: true
    )
  end
end
