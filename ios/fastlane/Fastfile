default_platform(:ios)

# List of all secrets
DEVELOPER_APP_ID = ENV["DEVELOPER_APP_ID"]
DEVELOPER_APP_IDENTIFIER = ENV["DEVELOPER_APP_IDENTIFIER"]
PROVISIONING_PROFILE_SPECIFIER = ENV["PROVISIONING_PROFILE_SPECIFIER"]
TEMP_KEYCHAIN_USER = ENV["TEMP_KEYCHAIN_USER"]
TEMP_KEYCHAIN_PASSWORD = ENV["TEMP_KEYCHAIN_PASSWORD"]
APPLE_ISSUER_ID = ENV["APPLE_ISSUER_ID"]
APPLE_KEY_ID = ENV["APPLE_KEY_ID"]
APPLE_KEY_CONTENT = ENV["APPLE_KEY_CONTENT"]
GIT_AUTHORIZATION = ENV["GIT_AUTHORIZATION"]
MATCH_REPO_URL = ENV["MATCH_REPO_URL"]  # Add this variable for your repository URL
ENV["MATCH_PASSWORD"] = "Somd@t329##"

# We will download and store our keychain into a file
def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

def create_temp_keychain(name, password)
  create_keychain(
    name: name,
    password: password,
    unlock: true,
    timeout: 0
  )
end

def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end

platform :ios do
  desc "Submit a new build to app store"
  lane :deploy_to_app_store do
    # # Create the KeyChain certificate and install it
    # ensure_temp_keychain(TEMP_KEYCHAIN_USER, TEMP_KEYCHAIN_PASSWORD)

    # Access to App Store Connect API
    api_key = app_store_connect_api_key(
      key_id: APPLE_KEY_ID,
      issuer_id: APPLE_ISSUER_ID,
      key_content: APPLE_KEY_CONTENT,    
      duration: 1200,            
      in_house: false
    )

    # Get the certificates from the GitHub account
    match(
      type: 'appstore',
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      git_url: "#{MATCH_REPO_URL}",
      # readonly: true,
      git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
      keychain_name: TEMP_KEYCHAIN_USER,
      keychain_password: TEMP_KEYCHAIN_PASSWORD,
      api_key: api_key,
      clone_branch_directly: true,
      git_branch: "main",
      generate_apple_certs: false,  # This is fine if certs are pre-generated
    )
    

    

    # Build the App 
    ipa = gym(
      configuration: "Release",
      export_xcargs: "-allowProvisioningUpdates",
      workspace: 'DirectWines.xcworkspace',
      scheme: "DirectWines",
      export_method: "app-store",
      export_options: {
        provisioningProfiles: { 
          DEVELOPER_APP_ID => PROVISIONING_PROFILE_SPECIFIER
        }
      },
      clean: true,  # Forces a clean build 
      skip_archive: false,  # Ensure archiving is not skipped
    )

    # Ship to TestFlight
    pilot(
      apple_id: "#{DEVELOPER_APP_ID}",
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      distribute_external: false,
      notify_external_testers: true,
      uses_non_exempt_encryption: false,
      ipa: ipa,
      skip_waiting_for_build_processing: true
    )
  end
end
