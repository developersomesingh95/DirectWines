#ios/fastlane/Fastlane
default_platform(:ios)
#list of all secrets
DEVELOPER_APP_ID = ENV["DEVELOPER_APP_ID"]
DEVELOPER_APP_IDENTIFIER = ENV["DEVELOPER_APP_IDENTIFIER"]
PROVISIONING_PROFILE_SPECIFIER = ENV["PROVISIONING_PROFILE_SPECIFIER"]
TEMP_KEYCHAIN_USER = ENV["TEMP_KEYCHAIN_USER"]
TEMP_KEYCHAIN_PASSWORD = ENV["TEMP_KEYCHAIN_PASSWORD"]
APPLE_ISSUER_ID = ENV["APPLE_ISSUER_ID"]
APPLE_KEY_ID = ENV["APPLE_KEY_ID"]
APPLE_KEY_CONTENT = ENV["APPLE_KEY_CONTENT"]
GIT_AUTHORIZATION = ENV["GIT_AUTHORIZATION"]

# We will download and store our keychain into a file
def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end
def create_temp_keychain(name, password)
  create_keychain(
    name: name,
    password: password,
    unlock: false,
    timeout: 0
  )
end
def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end

platform :ios do
  desc "Submit a new build to app store"
  lane :deploy_to_app_store do
    # Create the KeyChain certaficate and install it
    ensure_temp_keychain(TEMP_KEYCHAIN_USER, TEMP_KEYCHAIN_PASSWORD)
    
    # access to App Store Connect API
    api_key = app_store_connect_api_key(
      key_id: APPLE_KEY_ID,
      issuer_id: APPLE_ISSUER_ID,
      key_content: APPLE_KEY_CONTENT,    
      duration: 1200,            
      in_house: false
     )

    # get the certaficates from the Github account
    match(
        type: 'appstore',
        app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
        git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
        readonly: true,
        keychain_name: TEMP_KEYCHAIN_USER,
        keychain_password: TEMP_KEYCHAIN_PASSWORD,
        api_key: api_key
     )
    # Build the App
    ipa = gym(
        configuration: "Release",
        export_xcargs: "-allowProvisioningUpdates",
        workspace: 'AppName.xcworkspace',
        scheme: "AppName Release",
        export_method: "app-store",
        export_options: {
        provisioningProfiles: { 
            DEVELOPER_APP_ID => PROVISIONING_PROFILE_SPECIFIER
        }
      }
      )
    #Ship to TestFlight
    pilot(
      apple_id: "#{DEVELOPER_APP_ID}",
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      distribute_external: false,
      notify_external_testers: true,
      uses_non_exempt_encryption: false,
      ipa: ipa,
      skip_waiting_for_build_processing: true
     )
  end
end
# # This file contains the fastlane.tools configuration
# # You can find the documentation at https://docs.fastlane.tools
# #
# # For a list of all available actions, check out
# #
# #     https://docs.fastlane.tools/actions
# #
# # For a list of all available plugins, check out
# #
# #     https://docs.fastlane.tools/plugins/available-plugins
# #

# # Uncomment the line if you want fastlane to automatically update itself
# # update_fastlane

# default_platform(:ios)

# platform :ios do
#   desc "Push a new beta build to TestFlight"
#   lane :beta do
#     api_key = app_store_connect_api_key(
#     key_id: "6H2P6U67Z6",                    # Replace with your key ID
#     issuer_id: "69a6de75-8c22-47e3-e053-5b8c7c11a4d1",              # Replace with your issuer ID
#     key_filepath: "./api_key.p8"      # Replace with the path to your .p8 file
#   )
#     increment_build_number(xcodeproj: "DirectWines.xcodeproj")
#     build_app(workspace: "DirectWines.xcworkspace", scheme: "DirectWines")
#      # Use app-specific password for 2FA-enabled accounts
#      upload_to_testflight(
#       api_key: api_key,                        # Use the generated API key
#       skip_submission: true                    # Optional: skips submission if only uploading
#     )
#   end
# end
